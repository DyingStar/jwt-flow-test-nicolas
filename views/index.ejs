<!DOCTYPE html>
<html lang="en">

<head>
	<title>Salesforce OAuth - Explained</title>
	<link href="css/bootstrap.min.css" rel="stylesheet">
	<link href="css/custom.css" rel="stylesheet">
	<link rel="icon" type="image/icon" href="Cloud Red.ico" />
	
	<script type="text/javascript" src="lib/jquery.js"></script>
	<script type="text/javascript" src="lib/jqueryCookies.js"> </script>
	<script type="text/javascript" src="lib/bootstrap.min.js"> </script>

	<script>
			
		function clearAllCookies() {
			$.cookie("AccToken", '');
			$.cookie("APIVer", '');
			$.cookie("InstURL", '');
			$.cookie("idURL", '');
			$.cookie("LoggeduserId", '');
		}

		function initialiseButtons() {

			$("#prodBtn").click(function () {
				window.location = 'uAgent?isSandbox=false';
			});
			$("#sandBtn").click(function () {
				window.location = 'uAgent?isSandbox=true';
			});

			$("#prodBtnDvc").click(function () {
				window.location = 'device?isSandbox=false';
			});
			$("#sandBtnDvc").click(function () {
				window.location = 'device?isSandbox=true';
			});

			$("#prodBtnWSsecret").click(function () {
				window.location = 'webServer?isSandbox=false&type=secret';
			});
			$("#sandBtnWSsecret").click(function () {
				window.location = 'webServer?isSandbox=true&type=secret';
			});

			$("#prodBtnWSassertion").click(function () {
				window.location = 'webServer?isSandbox=false&type=assertion';
			});
			$("#sandBtnWSassertion").click(function () {
				window.location = 'webServer?isSandbox=true&type=assertion';
			});

			$("#prodBtnWSnone").click(function () {
				window.location = 'webServer?isSandbox=false&type=none';
			});
			$("#sandBtnWSnone").click(function () {
				window.location = 'webServer?isSandbox=true&type=none';
			});

			$("#prodBtnR").click(function () {
				window.location = 'jwt?isSandbox=false&jwtUserName=' + $("#jwtUserName").val();
			});
			$("#sandBtnR").click(function () {
				window.location = 'jwt?isSandbox=true&jwtUserName=' + $("#jwtUserName").val();
			});
		}
		
		function onload() {
			clearAllCookies();
			initialiseButtons();
		}

		window.onload = onload;
	</script>
</head>

<body class="container" style="padding-top: 50px;" onload="onload()">
	
	<!-- Navigation pane on top of page -->
	<nav role="navigation" class="navbar navbar-default navbar-fixed-top navbar-inverse">
		<div class="container">
			<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
				<ul class="nav navbar-nav">
					<li>
						<a href="#divHome">Home</a>
					</li>
					<li>
						<a href="#userAgentFlow">UserAgent</a>
					</li>
					<li>
						<a href="#webServer">Web Server</a>
					</li>
					<li>
						<a href="#jwt">JWT</a>
					</li>
					<li>
						<a href="#usernamePassword">Username Password</a>
					</li>
					<li>
						<a href="#deviceFlow">Device Authentication Flow </a>
					</li>
					<li>
						<a href="#refreshToken">Refresh Token</a>
					</li>
					<li>
						<a href="#samlAssertion">SAML Assertion</a>
					</li>
				</ul>
			</div>
		</div>
	</nav>

	<!-- Title and description -->
	<div class="jumbotron" Id="divHome">
		<h1>Salesforce OAuth Flows</h1>

		<div style="display:flex">
			<div style="width:80%;float:left">
				<b> Salesforce - Node.js app for testing OAuth Flows</b> 
				<br /> by <a href="https://www.linkedin.com/in/nicolas-vanden-bossche">Nicolas Vanden Bossche</a>, based on template by Jitendra Zaa.
			</div>
			<div style="width:20%;float:right">
				<img style="height:inherit" src="Salesforce.png" />
			</div>
		</div>
	</div>

	<!-- User Agent Flow -->
	<div class="jumbotron" id="userAgentFlow">
		<h2> User Agent Flow</h2>
		<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#userAgentCollapse">Show/Hide</button>
		
		<div id="userAgentCollapse" class="collapse">
			<ol class="smallFont">
				<li>
					This page contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_user_agent_flow.htm&type=5&sfdcIFrameOrigin=null"> OAuth 2.0 User-Agent flow</a>
				</li>
				<li> Upon clicking the button, the user is redirected to Salesforce to the Authorization Endpoint using GET method with the following parameters:
					<ul>
						<li><code>response_type=token</code> OR <code>response_type=token%20id_token</code></li>
						<li><code>client_id=&lt;Connected App client_id&gt;</code></li>
						<li><code>redirect_uri=<%= callbackURL %></code></li>
						<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
						<li><code>state=&lt;UniqueIdentifier&gt;</code> (prevents CSRF - other websites sending on behalf of this one)</li>
						<li><code>nonce=&lt;highEntropyCode&gt;</code> (prevents replay attack for Open ID)</li>
					</ul>
				</li>
				<li>Salesforce requests the user to log in and authorize the Connected App (this Node.js application)</li>
				<li>After successful authorization, Salesforce redirects to the callback URL (<%= callbackURL %>), passing along the Access Token.</li>
				<li> The callback page parses the returned data
					<ul>
							<li><code>access_token=00D...</code></li>
							<li><code>token_type=Bearer</code></li>
							<li><code>id_token=...</code> (contains information about the user's identity - only when specifying <code>openid</code> scope</li>
							<li><code>refresh_token=...</code></li>
							<li><code>instance_url=<%= baseURL %></code></li>
							<li><code>id=&lt;Identity URL&gt;</code></li>
							<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
					</ul>
				</li>
			</ol>
		</div>
		<a id="prodBtn" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
		<a id="sandBtn" role="button" class="btn btn-primary btn-lg">Sandbox</a>
	</div>
	
	<!-- Web Server Flow -->
	<div class="jumbotron" id="webServer">
		<h2>Web Server Flow </h2>
		<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#wsintro">Show/Hide</button>

		<div id="wsintro" class="collapse">
			<p>
				This section contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_web_server_flow.htm&type=5">OAuth 2.0 Web Server flow</a>.
			</p>
			<p>
				Three scenarios are covered: 
				<ol>
					<li>Web Server flow with a client secret: when using a secure web server that can store a client secret</li>
					<li>Web Server flow with a client assertion: when using a secure web server that has a private key to sign the message</li>
					<li>Web Server flow without client secret or assertion: when using a client application (browser / mobile app) that uses an external browser for auth</li>
				</ol>
			</p>
		</div>
		<div>
			<h3>Web Server Flow with Client Secret</h3>
			<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#wsclientsecret">Show/Hide</button>
			
			<div id="wsclientsecret" class="collapse">
				<p> 
					This section contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_web_server_flow.htm&type=5">OAuth 2.0 Web Server flow</a> with client secret.
				</p>
				<ol class="smallFont">
					<li>Client application redirects to authorization endpoint at <code><%= baseURL %>/services/oauth2/authorize</code> using the GET method with the following parameters:
						<ul>
							<li><code>response_type=code</code></li>
							<li><code>client_id=<%= clientId %></code> (client ID configured in Connected App)</li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code_challenge=<%= codeChallenge %></code> (optional - prevent authorization code interception attack)</li>
							<li><code>state=&lt;UniqueIdentifier&gt;</code> (optional - prevents CSRF - other websites sending on behalf of this one)</li>
							<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
						</ul>
					</li>
					<li>
						Salesforce asks the user to authenticate and then authorize the application. If successful, it redirects to the redirect_uri passing along the following parameters
						<ul>
							<li><code>code</code> (the authorization code to be used in the second part of the request)</li>
							<li><code>state</code> (if state was provided in original request)</li>
						</ul>
					</li>
					<li> 
						Callback page checks if the state remained the same to make sure that no other application initiated the request. 
						If OK, authorization code is sent to the token endpoint at <code><%= baseURL %>/services/oauth2/token</code> using the POST method with the following parameters:
						<ul>
							<li><code>grant_type=authorization_code</code></li>
							<li><code>client_id=<%= clientId %></code></li>
							<li><code>client_secret=<%= clientSecret %></code></li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code=...</code> (Authorization code from second step)</li>
							<li><code>code_verifier=...</code> (128 bit random string, base64 and URL encoded)</li>
						</ul>
					</li>
					<li>After successful authorization, returns the Access Token as a response to the POST messsage.</li>
					<li>The callback function parses the returned data
						<ul>
								<li><code>access_token=00D...</code></li>
								<li><code>token_type=Bearer</code></li>
								<li><code>id_token=...</code> (contains information about the user's identity - only when specifying <code>openid</code> scope</li>
								<li><code>refresh_token=...</code></li>
								<li><code>instance_url=<%= baseURL %></code></li>
								<li><code>id=&lt;Identity URL&gt;</code></li>
								<li><code>issued_at=...</code> (datetime at which the access token was issued)</li>
								<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
						</ul>
					</li>
				</ol>
			</div>
			<a id="prodBtnWSsecret" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
			<a id="sandBtnWSsecret" role="button" class="btn btn-primary btn-lg">Sandbox</a>
		</div>
		<div>
			<h3>Web Server Flow with Client Assertion</h3>
			<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#wsclientassertion">Show/Hide</button>

			<div id="wsclientassertion" class="collapse">
				<p> 
					This section contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_web_server_flow.htm&type=5">OAuth 2.0 Web Server flow</a> with client assertion.
				</p>
				
				<ol class="smallFont">
					<li>Client application redirects to authorization endpoint at <code><%= baseURL %>/services/oauth2/authorize</code> using the GET method with the following parameters:
						<ul>
							<li><code>response_type=code</code></li>
							<li><code>client_id=<%= clientId %></code> (client ID configured in Connected App)</li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code_challenge=<%= codeChallenge %></code> (optional - prevent authorization code interception attack)</li>
							<li><code>state=&lt;UniqueIdentifier&gt;</code> (optional - prevents CSRF - other websites sending on behalf of this one)</li>
							<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
						</ul>
					</li>
					<li>
						Salesforce asks the user to authenticate and then authorize the application. If successful, it redirects to the redirect_uri passing along the following parameters
						<ul>
							<li><code>code</code> (the authorization code to be used in the second part of the request)</li>
							<li><code>state</code> (if state was provided in original request)</li>
						</ul>
					</li>
					<li> 
						Callback page checks if the state remained the same to make sure that no other application initiated the request. 
						If OK, authorization code is sent to the token endpoint at <code><%= baseURL %>/services/oauth2/token</code> using the POST method with the following parameters:
						<ul>
							<li><code>grant_type=authorization_code</code></li>
							<li><code>client_id=<%= clientId %></code></li>
							<li><code>client_secret=<%= clientSecret %></code></li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code=...</code> (Authorization code from second step)</li>
							<li><code>code_verifier=...</code> (128 bit random string, base64 and URL encoded)</li>
							<li><code>client_assertion=...</code> (JWT token containing information about the client, signed with private key)</li>
							<li><code>client_assertion_type=urn:ietf:params:oauth:client-assertion-type:jwt-bearer</code></li>
						</ul>
					</li>
					<li>After successful authorization, returns the Access Token as a response to the POST messsage.</li>
					<li>The callback function parses the returned data
						<ul>
								<li><code>access_token=00D...</code></li>
								<li><code>token_type=Bearer</code></li>
								<li><code>id_token=...</code> (contains information about the user's identity - only when specifying <code>openid</code> scope</li>
								<li><code>refresh_token=...</code></li>
								<li><code>instance_url=<%= baseURL %></code></li>
								<li><code>id=&lt;Identity URL&gt;</code></li>
								<li><code>issued_at=...</code> (datetime at which the access token was issued)</li>
								<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
						</ul>
					</li>
				</ol>
			</div>
			<a id="prodBtnWSassertion" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
			<a id="sandBtnWSassertion" role="button" class="btn btn-primary btn-lg">Sandbox</a>
		</div>
		<div>
			<h3>Web Server Flow without Client Secret or Assertion</h3>
			<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#wsnone">Show/Hide</button>

			<div id="wsnone" class="collapse">
				<p> 
					This section contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_web_server_flow.htm&type=5">OAuth 2.0 Web Server flow</a> with client assertion.
				</p>
				<ol class="smallFont">
					<li>Client application redirects to authorization endpoint at <code><%= baseURL %>/services/oauth2/authorize</code> using the GET method with the following parameters:
						<ul>
							<li><code>response_type=code</code></li>
							<li><code>client_id=<%= clientId %></code> (client ID configured in Connected App)</li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code_challenge=<%= codeChallenge %></code> (optional - prevent authorization code interception attack)</li>
							<li><code>state=&lt;UniqueIdentifier&gt;</code> (optional - prevents CSRF - other websites sending on behalf of this one)</li>
							<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
						</ul>
					</li>
					<li>
						Salesforce asks the user to authenticate and then authorize the application. If successful, it redirects to the redirect_uri passing along the following parameters
						<ul>
							<li><code>code</code> (the authorization code to be used in the second part of the request)</li>
							<li><code>state</code> (if state was provided in original request)</li>
						</ul>
					</li>
					<li> 
						Callback page checks if the state remained the same to make sure that no other application initiated the request.
						For this flow, the code challenge and verifier are required to avoid interception of the authorization code!
						If OK, authorization code is sent to the token endpoint at <code><%= baseURL %>/services/oauth2/token</code> using the POST method with the following parameters:
						<ul>
							<li><code>grant_type=authorization_code</code></li>
							<li><code>client_id=<%= clientId %></code></li>
							<li><code>redirect_uri=<%= callbackURL %></code></li>
							<li><code>code=...</code> (Authorization code from second step)</li>
							<li><code>code_verifier=...</code> (128 bit random string, base64 and URL encoded)</li>
							<li>No client secret or client assertion!</li>
						</ul>
					</li>
					<li>After successful authorization, returns the Access Token as a response to the POST messsage.</li>
					<li>The callback function parses the returned data
						<ul>
								<li><code>access_token=00D...</code></li>
								<li><code>token_type=Bearer</code></li>
								<li><code>id_token=...</code> (contains information about the user's identity - only when specifying <code>openid</code> scope</li>
								<li><code>refresh_token=...</code></li>
								<li><code>instance_url=<%= baseURL %></code></li>
								<li><code>id=&lt;Identity URL&gt;</code></li>
								<li><code>issued_at=...</code> (datetime at which the access token was issued)</li>
								<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
						</ul>
					</li>
				</ol>
			</div>

			<a id="prodBtnWSnone" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
			<a id="sandBtnWSnone" role="button" class="btn btn-primary btn-lg">Sandbox</a>
		</div>
	</div>
	
	<!-- JWT Bearer Assertion Flow -->
	<div class="jumbotron" id="jwt">
		<p>
			<h2> JWT Bearer Assertion OAuth 2.0 Flow </h2>
			<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#jwtCollapse">Show/Hide</button>

			<div id="jwtCollapse" class="collapse">
				<p>
					<i class="note">
						<a href="https://jwt.io/"> Use this tool to debug JSON token generated in Node.js application. </a>
					</i>
				</p>

				<ol class="smallFont">
					<li>
						This page contains a JavaScript application that will use the <a href="https://help.salesforce.com/articleView?id=remoteaccess_oauth_jwt_flow.htm&type=5"> OAuth 2.0 JWT Bearer Token flow</a>
					</li>
					<li> Upon clicking the button, the system is generating a JWT token (containing iss, aud, sub, exp) and POSTs is to the token endpoint using the following parameters:
						<ul>
							<li><code>grant_type=urn:ietf:params:oauth:grant-type:jwt-bearer</code></li>
							<li><code>assertion=...</code> base64url(header.body.signature) - signature by private key is authentication</li>
							<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
						</ul>
					</li>
					<li> Salesforce checks the signature and assertion (containing user ID). Then checks previous authorizations before granting access token. </li>
					<li> 
						Access token gets returned and callback function processes and stores access token for use. Following parameters are returned:
						<ul>
							<li><code>access_token=...</code></li>
							<li><code>token_type=Bearer</code></li>
							<li><code>id=...</code> (identity URL)</li>
							<li><code>id_token=...</code> (identity token - OpenID)</li>
						</ul>
					</li>
					<li> Access token is used to query Salesforce. </li>
				</ol>
			</div>

			<a id="prodBtnR" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
			<a id="sandBtnR" role="button" class="btn btn-primary btn-lg">Sandbox</a>
		</p>


	</div>

	<!-- Username / Password Flow -->
	<div class="jumbotron" id="usernamePassword">
		<p>
			<h2>OAuth 2.0 Username-Password Flow </h2>
			<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#upCollapse">Show/Hide</button>

			<div id="upCollapse" class="collapse">
				<ol class="smallFont">
					<li> Enter username and password in the below form. Attention: This is not secure! Don't use critical credentials, instead use a Trailhead Playground! </li>
					<li> Upon clicking the button, username and password are sent to the token endpoint via POST method, using the following parameters:
						<ul>
							<li><code>grant_type=password</code></li>
							<li><code>username=<%= username %></code></li>
							<li><code>password=password</code></li>
							<li><code>client_id=<%= clientId %></code></li>
							<li><code>client_secret=<%= clientSecret %></code></li>
						</ul>
					<li> Salesforce checks the username, password, client ID and client secret. </li>
					<li> 
						Access token gets returned and callback function processes and stores access token for use. Following parameters are returned:
						<ul>
							<li><code>access_token=...</code></li>
							<li><code>token_type=Bearer</code></li>
							<li><code>instance_url=<%= baseURL %></code></li>
							<li><code>id=&lt;Identity URL&gt;</code></li>
							<li><code>issued_at=...</code> (datetime at which the access token was issued)</li>
							<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
						</ul>
					</li>
					<li> Access token is used to query Salesforce. </li>
				</ol>
			</div>

			<form action="/uPwd" method="POST" name="usernamepasswordFlow">
				<div class="form-group">
					<label for="sfdcUsername">Salesforce Username </label>
					<input class="form-control" name="sfdcUsername"  id="sfdcUsername" type="text" value="<%= username %>" />

					<label for="sfdcPassword">Salesforce Password </label>
					<input class="form-control"  name="sfdcPassword" id="sfdcPassword" type="password" value="" />
					<br>
					<button class="btn btn-primary btn-lg" type="submit" name="instance" value="prod">Production</button>
					<button class="btn btn-primary btn-lg" type="submit" name="instance" value="sand">Sandbox</button>
				</div>
			</form>
		</p>  
	</div>

	<!-- Device Flow -->
	<div class="jumbotron" id="deviceFlow">
			<p>
				<h2> OAuth 2.0 Device Authentication Flow</h2>
				<button type="button" style="margin-right:40px" class="btn btn-info" data-toggle="collapse" data-target="#deviceCollapse">Show/Hide</button>
	
				<div id="deviceCollapse" class="collapse">
					<ol class="smallFont">
						<li>Make sure Device Authentication flow is enabled in Connected App</li>
						<li>
							Retrieve a device code from the token endpoint using POST method and the following parameters:
							<ul>
								<li><code>response_type=device_code</code></li>
								<li><code>client_id=<%= clientId %></code></li>
								<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
							</ul>
						</li>
						<li>
							Process the response via the callback function, containing the following parameters:
							<ul>
								<li><code>user_code=...</code> (code to enter on the verification URI)</li>
								<li><code>verification_uri=...</code> (URL that the user needs to open in another browser)</li>
								<li><code>device_code=...</code> (device code to identify device)</li>
								<li><code>interval=...</code> (number of seconds to wait between polls)</li>
							</ul>
						</li>
						<li>Display the user code and authorization URL to the end user on the device</li>
						<li>
							Start polling the token endpoint with the device code. This is a POST with the following parameters:
							<ul>
								<li><code>grant_type=device</code></li>
								<li><code>code=...</code> (code from response)</li>
								<li><code>client_id=<%= clientId %></code></li>
							</ul>
						</li>
						<li>User enters the user code in a browser by navigating to the authorization URL</li>
						<li>
							Polling returns access_token. Following output parameters:
							<ul>
								<li><code>access_token=...</code></li>								
								<li><code>refresh_token=...</code></li>
								<li><code>token_type=Bearer</code></li>
								<li><code>scope=&lt;Scope parameters&gt;</code> (optional - uses scope defined in Connected App if not specified)</li>
								<li><code>instance_url=<%= baseURL %></code></li>
								<li><code>id=&lt;Identity URL&gt;</code></li>
								<li><code>issued_at=...</code> (datetime at which the access token was issued)</li>
								<li><code>signature=...</code> (client_secret key applied to id:issued_at - optional)</li>
							</ul>
						</li>
						<li>Access token is used to query Salesforce</li>
					</ol>
				</div>
	
				<a id="prodBtnDvc" role="button" style="margin-right:40px" class="btn btn-primary btn-lg">Production</a>
				<a id="sandBtnDvc" role="button" class="btn btn-primary btn-lg">Sandbox</a>
			</p>
		</div>

	<div class="jumbotron" id="refreshToken">
		<p>
			<h2>Refresh Token Flow</h2>
			<p><i><b> To be Implemented </b>	</i></p>
			Refresh Token flow can only be implemented for OAuth which asks users confirmation to validate connected app like Web Server flow and User Agent Flow 
		</p>
	</div>

	<div class="jumbotron" id="samlAssertion">
			<p>
				<h2>SAML Assertion Flow </h2>
				<p><i><b> To be Implemented </b>	</i></p>   
			</p>
		</div>


	

</body>

</html>